const admin = require("firebase-admin");
const fs = require("fs");
const path = require("path");

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Service Account Key
const serviceAccount = require("./serviceAccountKey.json");

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: serviceAccount.project_id || "pzas-db483",
  storageBucket: "pzas-db483.firebasestorage.app",
});

const db = admin.firestore();
const bucket = admin.storage().bucket();

async function uploadLecturers() {
  let lecturers;
  try {
    // –ß–∏—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç lecturers.json ‚Äî –≤—ñ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å—Ç–∏–π JSON!
    lecturers = JSON.parse(fs.readFileSync("lecturers.json", "utf8"));
  } catch (error) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ lecturers.json:", error);
    return;
  }

  const results = [];
  console.log(`üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–∞–∫–µ—Ç: ${bucket.name}`);
  console.log("üì° –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Firestore –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");

  for (const lecturer of lecturers) {
    // –®–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ —É –ø–∞–ø—Ü—ñ "photos"
    const localPhotoPath = path.join(__dirname, "photos", lecturer.photo);
    const storagePath = `lecturers/${lecturer.photo}`;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤ Firebase Storage
    try {
      await bucket.upload(localPhotoPath, {
        destination: storagePath,
        metadata: { contentType: "image/jpeg" },
      });
      console.log(`üì∑ –§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${lecturer.photo}`);
    } catch (error) {
      console.error(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ ${lecturer.photo}: ${error.message}`);
      results.push({
        name: lecturer.name,
        status: "error",
        message: `–§–æ—Ç–æ: ${error.message}`,
      });
      continue;
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Firestore
    const data = {
       name: lecturer.name,
       role: lecturer.role,
       specialization: lecturer.specialization,
       email: lecturer.email || "",
       biography: lecturer.biography || "",
       interests: lecturer.interests || [],
       publications: lecturer.publications || [],
       profiles: lecturer.profiles || {},
       photo: storagePath

    };

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó "lecturers" (–¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    try {
      const docRef = await db.collection("lecturers").add(data);
      console.log(`‚úÖ –í–∏–∫–ª–∞–¥–∞—á–∞ –¥–æ–¥–∞–Ω–æ: ${lecturer.name}, ID: ${docRef.id}`);
      results.push({ name: lecturer.name, status: "ok", id: docRef.id });
    } catch (error) {
      console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è ${lecturer.name}:`, error);
      results.push({
        name: lecturer.name,
        status: "error",
        message: `Firestore: ${error.message}`,
      });
    }
  }

  console.log("üéâ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  console.table(results);
}

uploadLecturers().catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:", err));